@page "/read"
@using ProjectBlazor.Shared
@using System.Net.Http
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<h3>Lista de Registros - <a href="/create/@_userProfileDto?.UserId">Create</a></h3>
<br>
@if (contagemUnidades != null && contagemUnidadesFalse != null && contagemUnidadesTrue != null)
{
    <table class="table">
    <thead>
        <tr>
            <th>Data</th>
            <th>Total de Unidades</th>
            <th>Green Red</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in contagemUnidades)
            {
                <tr>
                    <td>@item.Key.ToString("yyyy-MM-dd")</td>
                    <td>@item.Value</td>
                    <td>Total</td>
                </tr>
            }
            @foreach (var item in contagemUnidadesFalse)
            {
                <tr>
                    <td>@item.Key.ToString("yyyy-MM-dd")</td>
                    <td>@item.Value</td>
                    <td>Red</td>
                </tr>
            }
            @foreach (var item in contagemUnidadesTrue)
            {
                <tr>
                    <td>@item.Key.ToString("yyyy-MM-dd")</td>
                    <td>@item.Value</td>
                    <td>Green</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (todos != null)
{
    <ul>
    @foreach (var todo in todos)
        {
            if (todo.Green == true)
            {
                classInput = "green";
            }
            else
            {
                classInput = "red";
            }
            <div class="form-group">
                <input type="checkbox" @bind="todo.IsDone" disabled />
                <input class="@classInput" type="text" id="title" @bind="todo.Title" disabled />
                <input class="@classInput" type="number" id="value" @bind="todo.Value" disabled />
                <input class="@classInput" type="number" id="unidad" @bind="todo.Unidad" disabled />
                <input class="@classInput" type="text" id="unidad" @bind="todo.DateInsert" disabled />
                @if (!todo.IsDone)
                {
                    <select @onchange="e => CheckResult(e, todo.Id,todo.Value,todo.Unidad)">
                        <option selected value="">Select</option>
                        <option value="true">Green</option>
                        <option value="false">Red</option>
                    </select>
                }
                @*<a href="/update/@todo.Id"> - Editar</a> *@
    </div>
        }
    </ul>
}
else
{
    <h2>Nao tem dados</h2>
    <button @onclick="LoadTodos">Carregar Tarefas</button>
}

@code {
    private List<TodoItem> todos = new List<TodoItem>();

    public string? classInput;
    private UserProfileDto? _userProfileDto;
    private WalletDate walletItem = new WalletDate();
    private decimal result;
    bool considerarGreen = false; // Defina como 'false' se não quiser considerar 'Green'

    public Dictionary<DateTime, decimal> contagemUnidades;
    public Dictionary<DateTime, decimal> contagemUnidadesTrue;
    public Dictionary<DateTime, decimal> contagemUnidadesFalse;

    private async Task LoadTodos()
    {
        try
        {
            todos = await HttpClient.GetFromJsonAsync<List<TodoItem>>($"api/todo/all/{_userProfileDto.UserId}");
        }
        catch (Exception ex)
        {
            // Lidar com erros de carregamento
        }
    }
    private async void CheckResult(ChangeEventArgs e, Guid id, decimal value, decimal unidad)
    {
        string comp = e.Value.ToString();
        if (comp != "")
        {
            if (comp == "true")
            {
                result = walletItem.Wallet + ((walletItem.Unit * value) * unidad);
            }
            else
            {
                result = walletItem.Wallet - (walletItem.Unit * unidad);
            }
            await HttpClient.PutAsJsonAsync($"api/todo/confirm/{id}", e.Value);
            await HttpClient.PutAsJsonAsync($"api/wallet/change/{walletItem.Id}", result);
            await LoadTodos();
            StateHasChanged();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        if (_userProfileDto == null)
        {
            var response = await HttpClient.GetAsync("api/Auth/user-profile");
            if (response.IsSuccessStatusCode)
            {
                _userProfileDto = await response.Content.ReadFromJsonAsync<UserProfileDto>();
                await LoadTodos();
                await CalcularContagemUnidadesPorDia(null);
                await CalcularContagemUnidadesPorDia(true);
                await CalcularContagemUnidadesPorDia(false);
            }
        }

        try
        {
            walletItem = await HttpClient.GetFromJsonAsync<WalletDate>($"api/wallet/{_userProfileDto.UserId}");
        }
        catch (Exception ex)
        {

        }
    }
    // Função para calcular a contagem de unidades por dia com base em 'Green'
    public async Task CalcularContagemUnidadesPorDia(bool? considerarGreen)
    {

        var itensFiltrados = todos;

        if (considerarGreen.HasValue)
        {
            itensFiltrados = itensFiltrados.Where(item => item.Green == considerarGreen.Value).ToList();
            if (considerarGreen.Value == true)
            {
                contagemUnidadesTrue = new Dictionary<DateTime, decimal>();
                foreach (var todo in itensFiltrados)
                {
                    var dataDia = todo.DateInsert.Date;

                    if (contagemUnidadesTrue.ContainsKey(dataDia))
                    {
                        contagemUnidadesTrue[dataDia] += todo.Unidad;
                    }
                    else
                    {
                        contagemUnidadesTrue[dataDia] = todo.Unidad;
                    }
                }

            }
            else
            {
                contagemUnidadesFalse = new Dictionary<DateTime, decimal>();
                foreach (var todo in itensFiltrados)
                {
                    var dataDia = todo.DateInsert.Date;

                    if (contagemUnidadesFalse.ContainsKey(dataDia))
                    {
                        contagemUnidadesFalse[dataDia] += todo.Unidad;
                    }
                    else
                    {
                        contagemUnidadesFalse[dataDia] = todo.Unidad;
                    }
                }

            }
        }
        else
        {
            contagemUnidades = new Dictionary<DateTime, decimal>();
            foreach (var todo in itensFiltrados)
            {
                var dataDia = todo.DateInsert.Date;

                if (contagemUnidades.ContainsKey(dataDia))
                {
                    contagemUnidades[dataDia] += todo.Unidad;
                }
                else
                {
                    contagemUnidades[dataDia] = todo.Unidad;
                }
            }
        }

    }
}
